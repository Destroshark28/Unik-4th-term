EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
third_lab.exe -- emu8086 assembler version: 4.05  
 
[ 26/03/2019  --  00:11:01 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       data segment
[   2]    0000: 70 72 65 73 73 20 61 6E 79 20 6B 65   pressAnyKey db "press any key...$"
                79 2E 2E 2E 24                      
[   3]    0011: 64 61 74 61 2E 74 78 74 00            fileName db 'data.txt',0
[   4]    001A: 28                                    bufferString db 40
[   5]    001B: 24 24 24 24 24 24 24 24 24 24 24 24   str2 db "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24                                  
[   6]    0040: 00 00                                 handleFile     dw  0
[   7]        :                                       
[   8]        :                                       ends
[   9]        :                                       
[  10]        :                                       stack segment
[  11]    0050: 00 00 00 00 00 00 00 00 00 00 00 00   dw   128  dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  12]        :                                       ends
[  13]        :                                       
[  14]        :                                       
[  15]    0150:                                       start:
[  16]    0150: B8 00 00                              mov ax, data
[  17]    0153: 8E C0                                 mov es, ax
[  18]        :                                       
[  19]    0155: 33 C9                                 xor cx,cx
[  20]    0157: 8A 0E 80 00                           mov cl,[80h]
[  21]        :                                       
[  22]        :                                       
[  23]    015B: 83 F9 00                              cmp cx,0
[  24]    015E: 75 03 E9 A4 00                        je exit
[  25]        :                                       
[  26]    0163: 49                                    dec cx
[  27]        :                                       
[  28]    0164:                                       file:
[  29]    0164: BE 82 00                              mov si,82h
[  30]    0167: BF 11 00                              lea di,fileName
[  31]    016A: F3 A4                                 rep movsb
[  32]        :                                       
[  33]    016C: 8E D8                                 mov ds, ax
[  34]        :                                       
[  35]    016E: BA 11 00                              mov dx,offset fileName
[  36]        :                                       
[  37]    0171: B4 3D                                 mov ah,3Dh
[  38]        :                                       
[  39]    0173: B0 02                                 mov al,02h
[  40]        :                                       
[  41]    0175: CD 21                                 int 21h
[  42]    0177: 73 03 E9 8B 00                        jc exit
[  43]        :                                       
[  44]    017C: A3 40 00                              mov handleFile,ax
[  45]        :                                       
[  46]    017F: B9 00 00                              mov    cx,0
[  47]    0182: BA 00 00                              mov    dx,0
[  48]    0185: 8B 1E 40 00                           mov    bx,handleFile
[  49]    0189: B8 00 42                              mov    ax,4200h
[  50]    018C: CD 21                                 int    21h
[  51]        :                                       
[  52]    018E: B4 3F                                 mov ah ,3fh
[  53]    0190: BA 1A 00                              lea dx, bufferString
[  54]    0193: B9 00 01                              mov cx,256
[  55]    0196: CD 21                                 int 21h
[  56]        :                                       
[  57]    0198: B4 3E                                 mov ah,3Eh
[  58]    019A: CD 21                                 int 21h
[  59]        :                                       
[  60]    019C: BF 1A 00                              mov di, offset bufferString
[  61]    019F: B9 FF 00                              mov cx, 0FFh
[  62]    01A2: 33 C0                                 xor ax, ax
[  63]    01A4: F2 AE                                 repnz scasb
[  64]    01A6: F7 D1                                 not cx
[  65]    01A8: 49                                    dec cx
[  66]        :                                       
[  67]    01A9: 32 ED                                 xor ch,ch
[  68]    01AB: 8E C1                                 mov es,cx
[  69]        :                                       
[  70]    01AD: BE 1A 00                              lea si,bufferString
[  71]        :                                       
[  72]    01B0:                                       change:
[  73]        :                                       
[  74]    01B0: 33 DB                                 xor bx,bx
[  75]    01B2: 8B 1C                                 mov bx,[si]
[  76]        :                                       
[  77]    01B4: 83 EB 0A                              sub bx,10
[  78]    01B7: 80 FB 00                              cmp bl,0
[  79]    01BA: 74 0B                                 je end1
[  80]        :                                       
[  81]    01BC: 83 EB 03                              sub bx,3
[  82]    01BF: 80 FB 00                              cmp bl,0
[  83]    01C2: 74 03                                 je end1
[  84]        :                                       
[  85]    01C4: C6 04 20                              mov [si],' '
[  86]    01C7:                                       end1:
[  87]    01C7: AC                                    lodsb
[  88]    01C8: E2 E6                                 loop change
[  89]        :                                       
[  90]    01CA: BA 11 00                              mov dx,offset fileName
[  91]    01CD: B4 3D                                 mov ah,3Dh
[  92]    01CF: B0 02                                 mov al,02h
[  93]        :                                       
[  94]    01D1: CD 21                                 int 21h
[  95]    01D3: 72 32                                 jc exit
[  96]        :                                       
[  97]    01D5: A3 40 00                              mov handleFile,ax
[  98]        :                                       
[  99]    01D8: B9 00 00                              mov cx,0
[ 100]    01DB: BA 00 00                              mov dx,0
[ 101]    01DE: 8B 1E 40 00                           mov bx,handleFile
[ 102]    01E2: B8 00 42                              mov ax,4200h
[ 103]    01E5: CD 21                                 int 21h
[ 104]        :                                       
[ 105]    01E7: 33 C9                                 xor cx,cx
[ 106]    01E9: B4 40                                 mov ah,40h
[ 107]    01EB: BA 1A 00                              lea dx,bufferString
[ 108]    01EE: 8B 1E 40 00                           mov bx,handleFile
[ 109]    01F2: 8C C1                                 mov cx,es
[ 110]    01F4: CD 21                                 int 21h
[ 111]    01F6: EB 00                                 jmp close_file
[ 112]        :                                       
[ 113]    01F8:                                       close_file:
[ 114]        :                                       
[ 115]    01F8: B4 3E                                 mov ah,3Eh
[ 116]    01FA: CD 21                                 int 21h
[ 117]    01FC: BA 00 00                              lea dx, pressAnyKey
[ 118]    01FF: B4 09                                 mov ah, 9
[ 119]    0201: CD 21                                 int 21h
[ 120]        :                                       
[ 121]        :                                       
[ 122]    0203: B4 01                                 mov ah, 1
[ 123]    0205: CD 21                                 int 21h
[ 124]    0207:                                       exit:
[ 125]    0207: B8 00 4C                              mov ax, 4c00h
[ 126]    020A: CD 21                                 int 21h
[ 127]        :                                       
[ 128]        :                                       end start
[ 129]        :                                       
[ 130]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 0C      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 03      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 05      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: F2      -   check sum (l.byte)
0013: C6      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 01      -   IP - instruction pointer (h.byte)
0016: 00      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 01      -   relocation table - offset inside segment (h.byte)
0020: 05      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
